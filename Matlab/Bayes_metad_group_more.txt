# Bayesian estimation of meta-d/d for group correlation between domains
# Matthews modifications for 9 tasks

data {
    for (s in 1:nsubj) {
	
	# Type 1 counts for task 1
        	N[s,1] <- sum(counts1[s,1:nratings*2])
        	S[s,1] <- sum(counts1[s,(nratings*2)+1:nratings*4])
        	H[s,1] <- sum(counts1[s,(nratings*3)+1:nratings*4])
        	M[s,1] <- sum(counts1[s,(nratings*2)+1:nratings*3])
        	FA[s,1] <- sum(counts1[s,nratings+1:nratings*2])
        	CR[s,1] <- sum(counts1[s,1:nratings])

        # Type 1 counts for task 2
        N[s,2] <- sum(counts2[s,1:nratings*2])
        S[s,2] <- sum(counts2[s,(nratings*2)+1:nratings*4])
        H[s,2] <- sum(counts2[s,(nratings*3)+1:nratings*4])
        M[s,2] <- sum(counts2[s,(nratings*2)+1:nratings*3])
        FA[s,2] <- sum(counts2[s,nratings+1:nratings*2])
        CR[s,2] <- sum(counts2[s,1:nratings])

        # Type 1 counts for task 3
        N[s,3] <- sum(counts3[s,1:nratings*2])
        S[s,3] <- sum(counts3[s,(nratings*2)+1:nratings*4])
        H[s,3] <- sum(counts3[s,(nratings*3)+1:nratings*4])
        M[s,3] <- sum(counts3[s,(nratings*2)+1:nratings*3])
        FA[s,3] <- sum(counts3[s,nratings+1:nratings*2])
        CR[s,3] <- sum(counts3[s,1:nratings])

        # Type 1 counts for task 4
        N[s,4] <- sum(counts4[s,1:nratings*2])
        S[s,4] <- sum(counts4[s,(nratings*2)+1:nratings*4])
        H[s,4] <- sum(counts4[s,(nratings*3)+1:nratings*4])
        M[s,4] <- sum(counts4[s,(nratings*2)+1:nratings*3])
        FA[s,4] <- sum(counts4[s,nratings+1:nratings*2])
        CR[s,4] <- sum(counts4[s,1:nratings])

        # Type 1 counts for task 5
        N[s,5] <- sum(counts5[s,1:nratings*2])
        S[s,5] <- sum(counts5[s,(nratings*2)+1:nratings*4])
        H[s,5] <- sum(counts5[s,(nratings*3)+1:nratings*4])
        M[s,5] <- sum(counts5[s,(nratings*2)+1:nratings*3])
        FA[s,5] <- sum(counts5[s,nratings+1:nratings*2])
        CR[s,5] <- sum(counts5[s,1:nratings])

        # Type 1 counts for task 6
        N[s,6] <- sum(counts6[s,1:nratings*2])
        S[s,6] <- sum(counts6[s,(nratings*2)+1:nratings*4])
        H[s,6] <- sum(counts6[s,(nratings*3)+1:nratings*4])
        M[s,6] <- sum(counts6[s,(nratings*2)+1:nratings*3])
        FA[s,6] <- sum(counts6[s,nratings+1:nratings*2])
        CR[s,6] <- sum(counts6[s,1:nratings])

        # Type 1 counts for task 7
        N[s,7] <- sum(counts7[s,1:nratings*2])
        S[s,7] <- sum(counts7[s,(nratings*2)+1:nratings*4])
        H[s,7] <- sum(counts7[s,(nratings*3)+1:nratings*4])
        M[s,7] <- sum(counts7[s,(nratings*2)+1:nratings*3])
        FA[s,7] <- sum(counts7[s,nratings+1:nratings*2])
        CR[s,7] <- sum(counts7[s,1:nratings])

        # Type 1 counts for task 8
        N[s,8] <- sum(counts8[s,1:nratings*2])
        S[s,8] <- sum(counts8[s,(nratings*2)+1:nratings*4])
        H[s,8] <- sum(counts8[s,(nratings*3)+1:nratings*4])
        M[s,8] <- sum(counts8[s,(nratings*2)+1:nratings*3])
        FA[s,8] <- sum(counts8[s,nratings+1:nratings*2])
        CR[s,8] <- sum(counts8[s,1:nratings])

        # Type 1 counts for task 9
        N[s,9] <- sum(counts9[s,1:nratings*2])
        S[s,9] <- sum(counts9[s,(nratings*2)+1:nratings*4])
        H[s,9] <- sum(counts9[s,(nratings*3)+1:nratings*4])
        M[s,9] <- sum(counts9[s,(nratings*2)+1:nratings*3])
        FA[s,9] <- sum(counts9[s,nratings+1:nratings*2])
        CR[s,9] <- sum(counts9[s,1:nratings])

    }
}

model {
  for (s in 1:nsubj) {

    ## TYPE 2 SDT MODEL (META-D)
    # Multinomial likelihood for response counts ordered as c(nR_S1,nR_S2)
    counts1[s,1:nratings] ~ dmulti(prT[s,1:nratings,1],CR[s,1])
    counts1[s,nratings+1:nratings*2] ~ dmulti(prT[s,nratings+1:nratings*2,1],FA[s,1])
    counts1[s,(nratings*2)+1:nratings*3] ~ dmulti(prT[s,(nratings*2)+1:nratings*3,1],M[s,1])
    counts1[s,(nratings*3)+1:nratings*4] ~ dmulti(prT[s,(nratings*3)+1:nratings*4,1],H[s,1])

    counts2[s,1:nratings] ~ dmulti(prT[s,1:nratings,2],CR[s,2])
    counts2[s,nratings+1:nratings*2] ~ dmulti(prT[s,nratings+1:nratings*2,2],FA[s,2])
    counts2[s,(nratings*2)+1:nratings*3] ~ dmulti(prT[s,(nratings*2)+1:nratings*3,2],M[s,2])
    counts2[s,(nratings*3)+1:nratings*4] ~ dmulti(prT[s,(nratings*3)+1:nratings*4,2],H[s,2])

    counts3[s,1:nratings] ~ dmulti(prT[s,1:nratings,3],CR[s,3])
    counts3[s,nratings+1:nratings*2] ~ dmulti(prT[s,nratings+1:nratings*2,3],FA[s,3])
    counts3[s,(nratings*2)+1:nratings*3] ~ dmulti(prT[s,(nratings*2)+1:nratings*3,3],M[s,3])
    counts3[s,(nratings*3)+1:nratings*4] ~ dmulti(prT[s,(nratings*3)+1:nratings*4,3],H[s,3])

    counts4[s,1:nratings] ~ dmulti(prT[s,1:nratings,4],CR[s,4])
    counts4[s,nratings+1:nratings*2] ~ dmulti(prT[s,nratings+1:nratings*2,4],FA[s,4])
    counts4[s,(nratings*2)+1:nratings*3] ~ dmulti(prT[s,(nratings*2)+1:nratings*3,4],M[s,4])
    counts4[s,(nratings*3)+1:nratings*4] ~ dmulti(prT[s,(nratings*3)+1:nratings*4,4],H[s,4])

    counts5[s,1:nratings] ~ dmulti(prT[s,1:nratings,5],CR[s,5])
    counts5[s,nratings+1:nratings*2] ~ dmulti(prT[s,nratings+1:nratings*2,5],FA[s,5])
    counts5[s,(nratings*2)+1:nratings*3] ~ dmulti(prT[s,(nratings*2)+1:nratings*3,5],M[s,5])
    counts5[s,(nratings*3)+1:nratings*4] ~ dmulti(prT[s,(nratings*3)+1:nratings*4,5],H[s,5])

    counts6[s,1:nratings] ~ dmulti(prT[s,1:nratings,6],CR[s,6])
    counts6[s,nratings+1:nratings*2] ~ dmulti(prT[s,nratings+1:nratings*2,6],FA[s,6])
    counts6[s,(nratings*2)+1:nratings*3] ~ dmulti(prT[s,(nratings*2)+1:nratings*3,6],M[s,6])
    counts6[s,(nratings*3)+1:nratings*4] ~ dmulti(prT[s,(nratings*3)+1:nratings*4,6],H[s,6])

    counts7[s,1:nratings] ~ dmulti(prT[s,1:nratings,7],CR[s,7])
    counts7[s,nratings+1:nratings*2] ~ dmulti(prT[s,nratings+1:nratings*2,7],FA[s,7])
    counts7[s,(nratings*2)+1:nratings*3] ~ dmulti(prT[s,(nratings*2)+1:nratings*3,7],M[s,7])
    counts7[s,(nratings*3)+1:nratings*4] ~ dmulti(prT[s,(nratings*3)+1:nratings*4,7],H[s,7])

    counts8[s,1:nratings] ~ dmulti(prT[s,1:nratings,8],CR[s,8])
    counts8[s,nratings+1:nratings*2] ~ dmulti(prT[s,nratings+1:nratings*2,8],FA[s,8])
    counts8[s,(nratings*2)+1:nratings*3] ~ dmulti(prT[s,(nratings*2)+1:nratings*3,8],M[s,8])
    counts8[s,(nratings*3)+1:nratings*4] ~ dmulti(prT[s,(nratings*3)+1:nratings*4,8],H[s,8])

    counts9[s,1:nratings] ~ dmulti(prT[s,1:nratings,9],CR[s,9])
    counts9[s,nratings+1:nratings*2] ~ dmulti(prT[s,nratings+1:nratings*2,9],FA[s,9])
    counts9[s,(nratings*2)+1:nratings*3] ~ dmulti(prT[s,(nratings*2)+1:nratings*3,9],M[s,9])
    counts9[s,(nratings*3)+1:nratings*4] ~ dmulti(prT[s,(nratings*3)+1:nratings*4,9],H[s,9])

    for (task in 1:ntask) {

		# Means of SDT distributions]
		mu[s,task] <- Mratio[s,task]*d1[s,task]
		S2mu[s,task] <- mu[s,task]/2
		S1mu[s,task] <- -mu[s,task]/2

		# Calculate normalisation constants
		C_area_rS1[s,task] <- phi(c1[s,task] - S1mu[s,task])
		I_area_rS1[s,task] <- phi(c1[s,task] - S2mu[s,task])
		C_area_rS2[s,task] <- 1-phi(c1[s,task] - S2mu[s,task])
		I_area_rS2[s,task] <- 1-phi(c1[s,task] - S1mu[s,task])

		# Get nC_rS1 probs
		pr[s,1,task] <- phi(cS1[s,1,task] - S1mu[s,task])/C_area_rS1[s,task]
		for (k in 1:nratings-2) {
			pr[s,k+1,task] <- (phi(cS1[s,k+1,task] - S1mu[s,task])-phi(cS1[s,k,task] - S1mu[s,task]))/C_area_rS1[s,task]
		}
		pr[s,nratings,task] <- (phi(c1[s,task] - S1mu[s,task])-phi(cS1[s,nratings-1,task] - S1mu[s,task]))/C_area_rS1[s,task]

		# Get nI_rS2 probs
		pr[s,nratings+1,task] <- ((1-phi(c1[s,task] - S1mu[s,task]))-(1-phi(cS2[s,1,task] - S1mu[s,task])))/I_area_rS2[s,task]
		for (k in 1:nratings-2) {
			pr[s,nratings+1+k,task] <- ((1-phi(cS2[s,k,task] - S1mu[s,task]))-(1-phi(cS2[s,k+1,task] - S1mu[s,task])))/I_area_rS2[s,task]
		}
		pr[s,nratings*2,task] <- (1-phi(cS2[s,nratings-1,task] - S1mu[s,task]))/I_area_rS2[s,task]

		# Get nI_rS1 probs
		pr[s,(nratings*2)+1, task] <- phi(cS1[s,1,task] - S2mu[s,task])/I_area_rS1[s,task]
		for (k in 1:nratings-2) {
			pr[s,(nratings*2)+1+k,task] <- (phi(cS1[s,k+1,task] - S2mu[s,task])-phi(cS1[s,k,task] - S2mu[s,task]))/I_area_rS1[s,task]
		}
		pr[s,nratings*3,task] <- (phi(c1[s,task] - S2mu[s,task])-phi(cS1[s,nratings-1,task] - S2mu[s,task]))/I_area_rS1[s,task]

		# Get nC_rS2 probs
		pr[s,(nratings*3)+1,task] <- ((1-phi(c1[s,task] - S2mu[s,task]))-(1-phi(cS2[s,1,task] - S2mu[s,task])))/C_area_rS2[s,task]
		for (k in 1:nratings-2) {
			pr[s,(nratings*3)+1+k,task] <- ((1-phi(cS2[s,k,task] - S2mu[s,task]))-(1-phi(cS2[s,k+1,task] - S2mu[s,task])))/C_area_rS2[s,task]
		}
		pr[s,nratings*4,task] <- (1-phi(cS2[s,nratings-1,task] - S2mu[s,task]))/C_area_rS2[s,task]

		# Avoid underflow of probabilities
		for (i in 1:nratings*4) {
			prT[s,i,task] <- ifelse(pr[s,i,task] < Tol, Tol, pr[s,i,task])
		}

		# Specify ordered prior on criteria (bounded above and below by Type 1 c)
		for (j in 1:(nratings-1)) {
			cS1_raw[s,j,task] ~ dnorm(-mu_c2[task], lambda_c2[task]) T(,c1[s,task])
			cS2_raw[s,j,task] ~ dnorm(mu_c2[task], lambda_c2[task]) T(c1[s,task],)
		}
		cS1[s,1:nratings-1,task] <- sort(cS1_raw[s,1:nratings-1,task])
		cS2[s,1:nratings-1,task] <- sort(cS2_raw[s,1:nratings-1,task])

		Mratio[s,task] <- exp(logMratio[s,task])

    	}

    	# Draw log(M)'s from bivariate Gaussian
    	logMratio[s,1:9] ~ dmnorm(mu_logMratio[], TI[,])

	}

	mu_c2[1] ~ dnorm(0, 0.01)
	mu_c2[2] ~ dnorm(0, 0.01)
	mu_c2[3] ~ dnorm(0, 0.01)
	mu_c2[4] ~ dnorm(0, 0.01)
	mu_c2[5] ~ dnorm(0, 0.01)
	mu_c2[6] ~ dnorm(0, 0.01)
	mu_c2[7] ~ dnorm(0, 0.01)
	mu_c2[8] ~ dnorm(0, 0.01)
	mu_c2[9] ~ dnorm(0, 0.01)

	sigma_c2[1] ~ dnorm(0, 0.01) I(0, )
	sigma_c2[2] ~ dnorm(0, 0.01) I(0, )
	sigma_c2[3] ~ dnorm(0, 0.01) I(0, )
	sigma_c2[4] ~ dnorm(0, 0.01) I(0, )
	sigma_c2[5] ~ dnorm(0, 0.01) I(0, )
	sigma_c2[6] ~ dnorm(0, 0.01) I(0, )
	sigma_c2[7] ~ dnorm(0, 0.01) I(0, )
	sigma_c2[8] ~ dnorm(0, 0.01) I(0, )
	sigma_c2[9] ~ dnorm(0, 0.01) I(0, )

	lambda_c2[1] <- pow(sigma_c2[1], -2)
	lambda_c2[2] <- pow(sigma_c2[2], -2)
	lambda_c2[3] <- pow(sigma_c2[3], -2)
	lambda_c2[4] <- pow(sigma_c2[4], -2)
	lambda_c2[5] <- pow(sigma_c2[5], -2)
	lambda_c2[6] <- pow(sigma_c2[6], -2)
	lambda_c2[7] <- pow(sigma_c2[7], -2)
	lambda_c2[8] <- pow(sigma_c2[8], -2)
	lambda_c2[9] <- pow(sigma_c2[9], -2)

    mu_logMratio[1] ~ dnorm(0, 1)
    mu_logMratio[2] ~ dnorm(0, 1)
    mu_logMratio[3] ~ dnorm(0, 1)
    mu_logMratio[4] ~ dnorm(0, 1)
    mu_logMratio[5] ~ dnorm(0, 1)
    mu_logMratio[6] ~ dnorm(0, 1)
    mu_logMratio[7] ~ dnorm(0, 1)
    mu_logMratio[8] ~ dnorm(0, 1)
    mu_logMratio[9] ~ dnorm(0, 1)

    lambda_logMratio[1] ~ dgamma(0.001,0.001)
    lambda_logMratio[2] ~ dgamma(0.001,0.001)
    lambda_logMratio[3] ~ dgamma(0.001,0.001)
    lambda_logMratio[4] ~ dgamma(0.001,0.001)
    lambda_logMratio[5] ~ dgamma(0.001,0.001)
    lambda_logMratio[6] ~ dgamma(0.001,0.001)
    lambda_logMratio[7] ~ dgamma(0.001,0.001)
    lambda_logMratio[8] ~ dgamma(0.001,0.001)
    lambda_logMratio[9] ~ dgamma(0.001,0.001)

    sigma_logMratio[1] <- 1/sqrt(lambda_logMratio[1])
    sigma_logMratio[2] <- 1/sqrt(lambda_logMratio[2])
    sigma_logMratio[3] <- 1/sqrt(lambda_logMratio[3])
    sigma_logMratio[4] <- 1/sqrt(lambda_logMratio[4])
    sigma_logMratio[5] <- 1/sqrt(lambda_logMratio[5])
    sigma_logMratio[6] <- 1/sqrt(lambda_logMratio[6])
    sigma_logMratio[7] <- 1/sqrt(lambda_logMratio[7])
    sigma_logMratio[8] <- 1/sqrt(lambda_logMratio[8])
    sigma_logMratio[9] <- 1/sqrt(lambda_logMratio[9])

    rho ~ dunif(-100,100)

    T[1,1] <- 1/lambda_logMratio[1]
    T[1,2] <- rho*sigma_logMratio[1]*sigma_logMratio[2]
    T[1,3] <- rho*sigma_logMratio[1]*sigma_logMratio[3]
    T[1,4] <- rho*sigma_logMratio[1]*sigma_logMratio[4]
    T[1,5] <- rho*sigma_logMratio[1]*sigma_logMratio[5]
    T[1,6] <- rho*sigma_logMratio[1]*sigma_logMratio[6]
    T[1,7] <- rho*sigma_logMratio[1]*sigma_logMratio[7]
    T[1,8] <- rho*sigma_logMratio[1]*sigma_logMratio[8]
    T[1,9] <- rho*sigma_logMratio[1]*sigma_logMratio[9]

    T[2,1] <- rho*sigma_logMratio[1]*sigma_logMratio[2]
    T[2,2] <- 1/lambda_logMratio[2]
    T[2,3] <- rho*sigma_logMratio[2]*sigma_logMratio[3]
    T[2,4] <- rho*sigma_logMratio[2]*sigma_logMratio[4]
    T[2,5] <- rho*sigma_logMratio[2]*sigma_logMratio[5]
    T[2,6] <- rho*sigma_logMratio[2]*sigma_logMratio[6]
    T[2,7] <- rho*sigma_logMratio[2]*sigma_logMratio[7]
    T[2,8] <- rho*sigma_logMratio[2]*sigma_logMratio[8]
    T[2,9] <- rho*sigma_logMratio[2]*sigma_logMratio[9]

    T[3,1] <- rho*sigma_logMratio[1]*sigma_logMratio[3]
    T[3,3] <- 1/lambda_logMratio[3]
    T[3,2] <- rho*sigma_logMratio[3]*sigma_logMratio[2]
    T[3,4] <- rho*sigma_logMratio[3]*sigma_logMratio[4]
    T[3,5] <- rho*sigma_logMratio[3]*sigma_logMratio[5]
    T[3,6] <- rho*sigma_logMratio[3]*sigma_logMratio[6]
    T[3,7] <- rho*sigma_logMratio[3]*sigma_logMratio[7]
    T[3,8] <- rho*sigma_logMratio[3]*sigma_logMratio[8]
    T[3,9] <- rho*sigma_logMratio[3]*sigma_logMratio[9]

    T[4,1] <- rho*sigma_logMratio[1]*sigma_logMratio[4]
    T[4,4] <- 1/lambda_logMratio[4]
    T[4,2] <- rho*sigma_logMratio[4]*sigma_logMratio[2]
    T[4,3] <- rho*sigma_logMratio[4]*sigma_logMratio[3]
    T[4,5] <- rho*sigma_logMratio[4]*sigma_logMratio[5]
    T[4,6] <- rho*sigma_logMratio[4]*sigma_logMratio[6]
    T[4,7] <- rho*sigma_logMratio[4]*sigma_logMratio[7]
    T[4,8] <- rho*sigma_logMratio[4]*sigma_logMratio[8]
    T[4,9] <- rho*sigma_logMratio[4]*sigma_logMratio[9]

    T[5,1] <- rho*sigma_logMratio[1]*sigma_logMratio[5]
    T[5,5] <- 1/lambda_logMratio[5]
    T[5,2] <- rho*sigma_logMratio[5]*sigma_logMratio[2]
    T[5,3] <- rho*sigma_logMratio[5]*sigma_logMratio[3]
    T[5,4] <- rho*sigma_logMratio[5]*sigma_logMratio[4]
    T[5,6] <- rho*sigma_logMratio[5]*sigma_logMratio[6]
    T[5,7] <- rho*sigma_logMratio[5]*sigma_logMratio[7]
    T[5,8] <- rho*sigma_logMratio[5]*sigma_logMratio[8]
    T[5,9] <- rho*sigma_logMratio[5]*sigma_logMratio[9]

    T[6,1] <- rho*sigma_logMratio[1]*sigma_logMratio[6]
    T[6,6] <- 1/lambda_logMratio[6]
    T[6,2] <- rho*sigma_logMratio[6]*sigma_logMratio[2]
    T[6,3] <- rho*sigma_logMratio[6]*sigma_logMratio[3]
    T[6,4] <- rho*sigma_logMratio[6]*sigma_logMratio[4]
    T[6,5] <- rho*sigma_logMratio[6]*sigma_logMratio[5]
    T[6,7] <- rho*sigma_logMratio[6]*sigma_logMratio[7]
    T[6,8] <- rho*sigma_logMratio[6]*sigma_logMratio[8]
    T[6,9] <- rho*sigma_logMratio[6]*sigma_logMratio[9]

    T[7,1] <- rho*sigma_logMratio[1]*sigma_logMratio[7]
    T[7,7] <- 1/lambda_logMratio[7]
    T[7,2] <- rho*sigma_logMratio[7]*sigma_logMratio[2]
    T[7,3] <- rho*sigma_logMratio[7]*sigma_logMratio[3]
    T[7,4] <- rho*sigma_logMratio[7]*sigma_logMratio[4]
    T[7,5] <- rho*sigma_logMratio[7]*sigma_logMratio[5]
    T[7,6] <- rho*sigma_logMratio[7]*sigma_logMratio[6]
    T[7,8] <- rho*sigma_logMratio[7]*sigma_logMratio[8]
    T[7,9] <- rho*sigma_logMratio[7]*sigma_logMratio[9]

    T[8,1] <- rho*sigma_logMratio[1]*sigma_logMratio[8]
    T[8,8] <- 1/lambda_logMratio[8]
    T[8,2] <- rho*sigma_logMratio[8]*sigma_logMratio[2]
    T[8,3] <- rho*sigma_logMratio[8]*sigma_logMratio[3]
    T[8,4] <- rho*sigma_logMratio[8]*sigma_logMratio[4]
    T[8,5] <- rho*sigma_logMratio[8]*sigma_logMratio[5]
    T[8,6] <- rho*sigma_logMratio[8]*sigma_logMratio[6]
    T[8,7] <- rho*sigma_logMratio[8]*sigma_logMratio[7]
    T[8,9] <- rho*sigma_logMratio[8]*sigma_logMratio[9]

    T[9,1] <- rho*sigma_logMratio[1]*sigma_logMratio[9]
    T[9,9] <- 1/lambda_logMratio[9]
    T[9,2] <- rho*sigma_logMratio[9]*sigma_logMratio[2]
    T[9,3] <- rho*sigma_logMratio[9]*sigma_logMratio[3]
    T[9,4] <- rho*sigma_logMratio[9]*sigma_logMratio[4]
    T[9,5] <- rho*sigma_logMratio[9]*sigma_logMratio[5]
    T[9,6] <- rho*sigma_logMratio[9]*sigma_logMratio[6]
    T[9,7] <- rho*sigma_logMratio[9]*sigma_logMratio[7]
    T[9,8] <- rho*sigma_logMratio[9]*sigma_logMratio[8]

    TI[1:9,1:9] <- inverse(T[1:9,1:9])

}
